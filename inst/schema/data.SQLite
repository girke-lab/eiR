

-- meant to be added to the schema defined by ChmmineR
CREATE TABLE compound_groups (
	compound_group_id INTEGER PRIMARY KEY,
	name TEXT  UNIQUE 
);
CREATE TABLE compound_group_members (
	compound_group_id INTEGER NOT NULL REFERENCES compound_groups(compound_group_id) ON DELETE CASCADE,
	compound_id INTEGER NOT NULL REFERENCES compounds(compound_id) ON DELETE CASCADE ON UPDATE CASCADE,
	UNIQUE(compound_group_id,compound_id)
);
CREATE INDEX compound_group_members_compound_group_id ON compound_group_members(compound_group_id);

CREATE TABLE embeddings(
	embedding_id INTEGER PRIMARY KEY,
	name TEXT NOT NULL UNIQUE,
	dimension INTEGER NOT NULL,
	num_references INTEGER NOT NULL,
	descriptor_type_id INTEGER NOT NULL REFERENCES descriptor_types(descriptor_type_id) ON DELETE RESTRICT, 
	references_group_id INTEGER NOT NULL REFERENCES compound_groups(compound_group_id) ON DELETE RESTRICT,
	UNIQUE(dimension,num_references,descriptor_type_id,references_group_id)
);


CREATE TABLE runs (
	run_id INTEGER PRIMARY KEY,
	name TEXT DEFAULT '',
	embedding_id INTEGER NOT NULL REFERENCES embeddings(embedding_id) ON DELETE RESTRICT,
	compound_group_id INTEGER NOT NULL REFERENCES compound_groups(compound_group_id) ON DELETE RESTRICT,
	sample_group_id INTEGER REFERENCES compound_groups(compound_group_id) ON DELETE RESTRICT,
	UNIQUE(embedding_id,compound_group_id)
);

CREATE TABLE embedded_descriptors (
	embedding_id INTEGER NOT NULL REFERENCES embeddings(embedding_id) ON DELETE CASCADE,
	descriptor_id INTEGER NOT NULL REFERENCES descriptors(descriptor_id) ON DELETE CASCADE,
	ordering INTEGER NOT NULL,
	value REAL NOT NULL,
	UNIQUE(embedding_id,descriptor_id,ordering)
);
CREATE INDEX embedded_desc_embed_id_desc_id ON embedded_descriptors(embedding_id,descriptor_id);

--compounds in compound group for run id=3 that are do not have descriptors of type 'ap'
--in embedded_descriptors
CREATE OR REPLACE VIEW unembedded_descriptors AS
	SELECT cgm.compound_id, r.run_id, dt.descriptor_type
	FROM	 runs AS r 
			 JOIN compound_groups AS cg USING(compound_group_id)
			 JOIN compound_group_members AS cgm USING(compound_group_id)
			 JOIN descriptors AS d USING(compound_id)
			 JOIN descriptor_types AS dt USING(descriptor_type_id
			 LEFT JOIN embedded_descriptors AS ed ON(r.embedding_id=ed.embedding_id AND d.descriptor_id = ed.descriptor_id)
	WHERE
			ed.descriptor_id IS NULL
;			 

--CREATE OR REPLACE VIEW run_embedded_descriptors AS
	--SELECT r.run_id, ed.descriptor_id,ed.ordering,ed.value
	--FROM	runs AS r
			--JOIN 	

